import { NextResponse } from 'next/server';
import { getYouTubeClient } from '@/lib/youtube-auth';
import { searchYouTubeVideos } from '@/lib/youtube-search';
import { ShazamTrack } from '@/lib/csv-parser'; // Import from the correct location

interface PlaylistRequest {
  tracks: ShazamTrack[];
  accessToken: string;
  playlistTitle: string;
}

export async function POST(request: Request) {
  try {
    const { tracks, accessToken, playlistTitle = 'Shazam Playlist' } = await request.json();

    // Validate required fields
    if (!tracks || !accessToken) {
      console.error('Missing required fields:', { 
        hasTracks: !!tracks, 
        hasAccessToken: !!accessToken,
        tracksLength: tracks?.length 
      });
      return NextResponse.json(
        { error: 'Missing required fields: tracks and accessToken are required' },
        { status: 400 }
      );
    }

    if (!Array.isArray(tracks) || tracks.length === 0) {
      return NextResponse.json(
        { error: 'No tracks provided or tracks array is empty' },
        { status: 400 }
      );
    }

    // Validate track structure
    const invalidTracks = tracks.filter(track => 
      !track || typeof track.title !== 'string' || typeof track.artist !== 'string'
    );
    
    if (invalidTracks.length > 0) {
      console.error('Invalid tracks found:', invalidTracks);
      return NextResponse.json(
        { error: `Found ${invalidTracks.length} invalid tracks` },
        { status: 400 }
      );
    }

    console.log(`Creating playlist with ${tracks.length} tracks`);
    
    const youtube = getYouTubeClient(accessToken);

    // Create playlist
    const playlistResponse = await youtube.playlists.insert({
      part: ['snippet', 'status'],
      requestBody: {
        snippet: {
          title: playlistTitle,
          description: `Created from Shazam export with ${tracks.length} tracks - Generated by Shazam to YouTube Converter`
        },
        status: {
          privacyStatus: 'private'
        }
      }
    });

    const playlistId = playlistResponse.data.id;

    if (!playlistId) {
      throw new Error('Failed to create playlist - no playlist ID returned');
    }

    console.log(`Playlist created with ID: ${playlistId}`);

    // Search for videos and add to playlist
    const searchResults = await searchYouTubeVideos(youtube, tracks);
    const successfulAdds = [];

    console.log(`Search completed. Found ${searchResults.filter(r => r.videoId).length} videos out of ${tracks.length} tracks`);

    for (const result of searchResults) {
      if (result.videoId) {
        try {
          await youtube.playlistItems.insert({
            part: ['snippet'],
            requestBody: {
              snippet: {
                playlistId: playlistId,
                resourceId: {
                  kind: 'youtube#video',
                  videoId: result.videoId
                }
              }
            }
          });
          successfulAdds.push(result.track);
          console.log(`Added: ${result.track.artist} - ${result.track.title}`);
        } catch (error) {
          console.error(`Failed to add ${result.track.artist} - ${result.track.title}:`, error);
        }
      } else {
        console.log(`Could not find video for: ${result.track.artist} - ${result.track.title}`);
      }
    }

    const result = {
      success: true,
      playlistId,
      totalTracks: tracks.length,
      addedTracks: successfulAdds.length,
      failedTracks: tracks.length - successfulAdds.length
    };

    console.log('Playlist creation result:', result);
    return NextResponse.json(result);

  } catch (error) {
    console.error('Playlist creation error:', error);
    
    let errorMessage = 'Failed to create playlist';
    if (error instanceof Error) {
      errorMessage = error.message;
    }
    
    return NextResponse.json(
      { 
        error: errorMessage,
        success: false,
        totalTracks: 0,
        addedTracks: 0,
        failedTracks: 0
      },
      { status: 500 }
    );
  }
}